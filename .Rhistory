runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("gghighlight")
library(gghighlight)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_aa = read.csv("data/all-ages.csv")
data = data_aa %>%
# filter(Major_category == "Agriculture & Natural Resources", Major_category == "Arts") %>%
group_by(Major_category) %>%
summarise(med_salary=mean(Median))
data
data = data_aa %>%
filter(Major_category == "Agriculture & Natural Resources", Major_category == "Arts") %>%
runApp()
filter(data_aa, Major_category=="Arts")
filter(data_aa, Major_category=="Arts" | Major_category=="Business")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Downloads/QUESTIONAIRE_R.R')
install.packages("shinydashboard")
runApp('~/Downloads/QUESTIONAIRE_R.R')
runApp('~/Downloads/QUESTIONAIRE_R.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
data_rg = read.csv("data/recent-grads.csv")
data_rg %>%
filter(Major_category == input$cat1) %>%
group_by(Major_category) %>%
summarise(total_m=sum(Men), total_f=sum(Women))
data_rg %>%
filter(Major_category == "Arts") %>%
group_by(Major_category) %>%
summarise(total_m=sum(Men), total_f=sum(Women))
d = data_rg %>%
filter(Major_category == "Arts") %>%
group_by(Major_category) %>%
summarise(total_m=sum(Men), total_f=sum(Women))
t(d)
sumcol(t(d))
runApp()
runApp()
runApp()
install.packages("scales")
runApp()
runApp()
runApp()
install.packages("devtools")
runApp()
runApp()
runApp()
runApp()
install.packages("caret")
data
library(caret)
data = read.csv("data/all-ages.csv")
data
summary(data)
data = read.csv("data/class-list.csv")
summary(data)
data = read.table("data/class-list.csv", header=T, sep=",",
colClasses=c("numeric", "factor", "factor", "factor",
"factor", "factor"))
summary(data)
names(data) = c("id", "major", "major_cat", "fav1", "fav2", "least")
summary(data)
hist(data$major_cat)
plot(data$major_cat)
?plot
plot(data$fav1)
names(data) = c("id", "major", "y", "fav1", "fav2", "least")
summary(data)
data$id = NULL
dummies = dummyVars(y ~ ., data=data)
ex = data.frame(predict(dummies, newdata=data))
ex
data$major = NULL
dummies = dummyVars(y ~ ., data=data)
ex = data.frame(predict(dummies, newdata=data))
ex
names(ex) = gsub("\\.", "", names(ex))
ex
data = cbind(data$y, ex)
names(data)
names(data)[1] = "y"
rm(dummies, ex)
descrCorr = cor(data[,2:ncol(data)])
highCorr = sum(abs(descrCorr[upper.tri(descrCorr)]) > 0.8)
highCorr
highCorr = sum(abs(descrCorr[upper.tri(descrCorr)]) > 0.85)
highCorr
highCorrDescr = findCorrelation(descrCorr, cutoff=0.85)
highCorrDescr
descrCorr2 = cor(filteredDescr)
filteredDescr = data[,2:ncol(data)][,-highCorrDescr]
descrCorr2 = cor(filteredDescr)
summary(descrCorr2)
data = cbind(data$y, filteredDescr)
names(data)[1] = "y"
rm(descrCorr, descrCorr2, filteredDescr, highCorr, highCorrDescr)
y = data$y
data = cbind(rep(1, nrow(data)), data[2:ncol(data)])
names(data)[1] = "ones"
comboInfo = findLinearCombos(data)
comboInfo
data
data = data[, -comboInfo$remove]
data$ones = NULL
data = cbind(y, data)
data
rm(y, comboInfo)
train(data)
train(data[,2:ncol(data)], data$y)
fit = train(data[,2:ncol(data)], data$y)
?predict
predict(data[,2:ncol(data)])
predict(fit, data[,2:ncol(data)])
data[1,2:ncol(data)]
d = data[1,2:ncol(data)]
View(d)
d[1,3] = 1; d[1,5] = 0
d[1,10] = 0; d[1,11] = 1
d
predict(fit, d)
fit = train(data[,2:ncol(data)], data$y, method=c("center", "scale"))
fit = train(data[,2:ncol(data)], data$y, preProcess=c("center", "scale"))
predict(fit, data[,2:ncol(data)])
predict(fit, d)
d = data[1,2:ncol(data)]
d
d[1,8] = 1; d[1,5] = 0
d[1,10] = 0; d[1,13] = 1
d
predict(fit, d)
library(caret)
data = read.table("data/class-list.csv", header=T, sep=",",
colClasses=c("numeric", "factor", "factor", "factor",
"factor", "factor"))
summary(data)
names(data) = c("id", "major", "y", "fav1", "fav2", "least")
plot(data$fav1)
data$id = NULL
data$major = NULL
dummies = dummyVars(y ~ ., data=data)
ex = data.frame(predict(dummies, newdata=data))
names(ex) = gsub("\\.", "", names(ex))
ex
data = cbind(data$y, ex)
names(data)[1] = "y"
rm(dummies, ex)
descrCorr = cor(data[,2:ncol(data)])
highCorr = sum(abs(descrCorr[upper.tri(descrCorr)]) > 0.85)
highCorr
highCorrDescr = findCorrelation(descrCorr, cutoff=0.85)
highCorrDescr
filteredDescr = data[,2:ncol(data)][,-highCorrDescr]
descrCorr2 = cor(filteredDescr)
summary(descrCorr2)
data = cbind(data$y, filteredDescr)
names(data)[1] = "y"
rm(descrCorr, descrCorr2, filteredDescr, highCorr, highCorrDescr)
# y = data$y
# data = cbind(rep(1, nrow(data)), data[2:ncol(data)])
# names(data)[1] = "ones"
#
# comboInfo = findLinearCombos(data)
# comboInfo
#
# data = data[, -comboInfo$remove]
# data$ones = NULL
# data = cbind(y, data)
# data
#
# rm(y, comboInfo)
fit = train(data[,2:ncol(data)], data$y, preProcess=c("center", "scale"))
predict(fit, data[,2:ncol(data)])
d = data[1,2:ncol(data)]
d[1,8] = 1; d[1,5] = 0
d[1,10] = 0; d[1,13] = 1
d
predict(fit, d)
d[1,8] = 1; d[1,5] = 0
d[1,13] = 0; d[1,15] = 1
d
predict(fit, d)
d[1,19] = 0; d[1,21] = 1
d
predict(fit, d)
View(fit)
fit
predict(fit, data[,2:ncol(data)])
library(caret)
data = read.table("data/class-list.csv", header=T, sep=",",
colClasses=c("numeric", "factor", "factor", "factor",
"factor", "factor"))
summary(data)
names(data) = c("id", "major", "y", "fav1", "fav2", "least")
plot(data$fav1)
data$id = NULL
data$major = NULL
dummies = dummyVars(y ~ ., data=data)
dummies
ex = data.frame(predict(dummies, newdata=data))
View(ex)
names(ex) = gsub("\\.", "", names(ex))
data = cbind(data$y, ex)
View(data)
names(data)[1] = "y"
rm(dummies, ex)
descrCorr = cor(data[,2:ncol(data)])
descrCorr
highCorr = sum(abs(descrCorr[upper.tri(descrCorr)]) > 0.85)
highCorr
highCorrDescr = findCorrelation(descrCorr, cutoff=0.85)
highCorrDescr
filteredDescr = data[,2:ncol(data)][,-highCorrDescr]
filteredDescr
descrCorr2 = cor(filteredDescr)
descrCorr2
summary(descrCorr2)
data = cbind(data$y, filteredDescr)
names(data)[1] = "y"
rm(descrCorr, descrCorr2, filteredDescr, highCorr, highCorrDescr)
y = data$y
data = cbind(rep(1, nrow(data)), data[2:ncol(data)])
names(data)[1] = "ones"
comboInfo = findLinearCombos(data)
comboInfo
data = data[, -comboInfo$remove]
data$ones = NULL
data = cbind(y, data)
data
rm(y, comboInfo)
fit = train(data[,2:ncol(data)], data$y)
fit
?train
predict(fit, data[,2:ncol(data)])
d = data[1,2:ncol(data)]
d
d[1,14] = 0;
d
d[1,3] = 1; d[1,5] = 0
d[1,10] = 0; d[1,12] = 1
d[1,14] = 0;
d
d[1,14] = 1;
d
predict(fit, d)
runApp()
View(fit)
View(fit)
View(fit)
fit
data
View(data)
runApp()
runApp()
d = data.frame(rep(0, ncol(data)))
d
d = data[1,2:ncol(data)]
for (i in 1:ncol(d)) {
d[1,i] = 0
}
d
match("fav1Biology", d)
match("fav1Biology", d[1,])
match("fav1Biology", names(d))
match("fav1Bioloy", names(d))
match(paste("fav1", "Biology"), names(d))
match(paste("fav1", "Biology", sep=""), names(d))
d
if (!is.na(match(paste("fav1", "English", sep=""), names(d)))) {
d[1,match(paste("fav1", "English", sep=""), names(d))] = 1
}
d
runApp()
l = c("a", "b", "c")
match("c", l)
match("d", l)
names(d)
runApp()
runApp()
runApp()
runApp()
runApp()
?img
?div
runApp()
runApp()
runApp('~/Downloads/QUESTIONAIRE_R.R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
#load libraries
library(shiny)
library(shinydashboard)
library("DT")
# Define UI
ui <- fluidPage(
# Define UI for slider demo app ----
ui <- fluidPage(
table <- "responses",
# App title ----
titlePanel("Determine Your Best Strength Quiz"),
# Sidebar layout with input and output definitions ----
sidebarLayout(
# Sidebar to demonstrate various slider options ----
sidebarPanel(
# Input: Problem-Solving
sliderInput("ps1", "I see myself as someone who likes to provide solutions to problems, no matter how difficult.",
min = 1, max = 7,
value = 1),
# Input: Communication
sliderInput("com1", "I see myself as someone who can  clearly explain my thoughts to others.",
min = 1, max = 7,
value = 1),
# Input: Analytical
sliderInput("analy1", "I see myself as someone who prefers to understand the 'why' behind problems/solutions",
min = 1, max = 7,
value = 1),
# Input: Leadership
sliderInput("lead1", "I see myself as someone who naturally seems to lead groups/others in group projects",
min = 1, max = 7,
value = 1),
# Input: Problem-Solving 2
sliderInput("ps2", "I see myself as someone who views problems as challenges to learn from. ",
min = 1, max = 7,
value = 1),
# Input: Communication 2
sliderInput("comm2", "I see myself as someone who can easily relate/emphathize with others",
min = 1, max = 7,
value = 1),
# Input: Analytical 2
sliderInput("analy2", "I see myself as someone who likes to gather and consider information fully before making a decision.",
min = 1, max = 7,
value = 1),
# Input: Leadership 2
sliderInput("lead2", "I see myself as someone who participates fully in group projects; I don't like to do nothing in group projects.",
min = 1, max = 7,
value = 1),
actionButton("submit", "Submit")
),
# Main panel for displaying outputs ----
mainPanel(
# Output: Table summarizing the values entered ----
tableOutput("values"),
textOutput("strength_ps"),
textOutput("strength_com"),
textOutput("strength_analy"),
textOutput("strength_lead")
))
)
)
server <- function(input, output, session) {
# Reactive expression to create data frame of all input values ----
sliderValues <- reactive({
data.frame(
Name = c("Problem-solving",
"Communication",
"Analytical",
"Leadership"),
Value = as.character(c((input$ps1 + (8-input$ps2))/2,
(input$comm1 + (8 - input$comm2))/2,
(input$analy1 + (8 - input$analy2))/2,
(input$lead1 + (8 - input$lead2))/2
)),
stringsAsFactors = FALSE)
})
# Show the values in an HTML table, only after they press submit
observeEvent(input$submit,
output$values <- renderTable({
sliderValues()
}
output$strength_ps <- renderText({
"If your value is above a 5, one of your strengths is a problem-solver!
Your Strength: Problem-Solving
You are a natural-born problem-solver. Is there a problem? Let's leave it to you to come in and save the day!
If you have tied with other characteristics, congrats--you are a multi-facted individual!"
})
output$strength_com <- renderText({
"If your value is above a 5, one of your strengths is communication!
Your Strength: Communication
You are incredible at navigating your words to reach each and every single individual. Have a presentation to a client? Let's leave it to you to present. You're the go-to expert on articulating your thoughts clearly and efficiently.
If you have tied with other characteristics, congrats--you are a multi-facted individual!"
})
output$strength_analy <- renderText({
"If your value is above a 5, one of your strengths is analytical!
Your Strength: Analytical
You're the bread and butter of understanding how to get to the bottom of things. You're strategic in really trying to collect all informaation at hand before making a decision. Facts and tasks are your favorite thing in this world.
If you have tied with other characteristics, congrats--you are a multi-facted individual!"
})
output$strength_lead <- renderText({
"If your value is above a 5, one of your strengths is communication!
Your Strength: Leadership
People look to you whenever there is something to do done. You might not know even know why, but you just always seem to take charge and organize everything and everyone to get things done. You are the backbone of group projects and always ensure everyone is getting along.
If you have tied with other characteristics, congrats--you are a multi-facted individual!"
})
shinyApp(ui = ui, server = server)
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R (1).R')
runApp('~/Downloads/QUESTIONAIRE_R.R')
runApp()
runApp()
